#!/usr/bin/env python3
import os
import json
import sys


def check_records(path):
    if not os.path.exists(path):
        try:
            file = open(path, 'w')
            json.dump(dict(), file, indent=4)
            file.close()
            flag = True
        except Exception as e:
            print(e)
            flag = False
    elif os.access(path, os.R_OK):
        flag = True
    else:
        flag = False
    return flag


def get_records(path) -> dict:
    with open(path, 'r') as file:
        records = json.load(file)
    return records


def run(records, key, method):
    if key in records.keys():
        record = records[key]
    else:
        possible_records = []
        for item_key in records:
            if key == records[item_key][0][-len(key):]:
                possible_records.append(records[item_key])
        if len(possible_records) == 1:
            record = possible_records[0]
        else:
            raise KeyError

    if method == "ssh":
        cmd = "sshpass -p {0} ssh -p {1} {2}@{3}".format(record[3], record[1], record[2], os.popen(record[0]).read())
    else:
        cmd = "sshpass -p {0} sftp -P {1} {2}@{3}".format(record[3], record[1], record[2], os.popen(record[0]).read())

    os.system(cmd)
    return


def main():
    records_path = os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), '.switch.json')

    assert sys.argv.__len__() > 1
    assert check_records(records_path)
    records = get_records(records_path)

    if sys.argv[1] == '-l':
        assert sys.argv.__len__() == 2
        print('\n'.join(records.keys()))
    elif sys.argv[1] == '-e':
        assert sys.argv.__len__() == 2
        os.system("vim '{0}'".format(records_path))
    elif sys.argv[1] == '-f':
        assert sys.argv.__len__() == 3
        run(records, sys.argv[2], "sftp")
    elif sys.argv[1] == '-s':
        assert sys.argv.__len__() == 3
        run(records, sys.argv[2], "ssh")
    else:
        assert sys.argv.__len__() == 2
        run(records, sys.argv[1], "ssh")
    return


if __name__ == '__main__':
    main()
